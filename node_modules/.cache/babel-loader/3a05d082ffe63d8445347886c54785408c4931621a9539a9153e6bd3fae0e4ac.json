{"ast":null,"code":"import axios from \"axios\";\n// verificar se o CNPJ tem 14 digitos\nconst isValidCnpj = cnpj => {\n  const cnpjRegex = /^\\d{14}$/;\n  return cnpjRegex.test(cnpj);\n};\n\n// busca as informacoes de contratos do orgao\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  //erro se o CNPJ for inválido\n  if (!isValidCnpj(cnpj)) {\n    throw new Error(\"CNPJ inválido.\");\n  }\n\n  // valida o formato da data \n  const startDate = new Date(dataInicial);\n  const endDate = new Date(dataFinal);\n  console.log(\"CNPJ:\", cnpj);\n  console.log(\"Data Inicial:\", dataInicial);\n  console.log(\"Data Final:\", dataFinal);\n  if (startDate > endDate) {\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\n  }\n\n  // Formatando as datas no padrão esperado (YYYYMMDD)\n  const formattedDataInicial = dataInicial.replace(/-/g, \"\");\n  const formattedDataFinal = dataFinal.replace(/-/g, \"\");\n  try {\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n      params: {\n        cnpjOrgao: cnpj,\n        // Corrigido para cnpjOrgao\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n\n    // Log da resposta completa\n    console.log(\"Resposta da API:\", response.data);\n    if (!response.data.data || response.data.data.length === 0) {\n      throw new Error(\"Nenhum contrato encontrado para o CNPJ informado.\");\n    }\n\n    // Extrair dados do órgão a partir do primeiro contrato retornado\n    const orgao = {\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Extrair dados dos contratos\n    const contratos = response.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial,\n      cnpjFornecedor: contrato.niFornecedor\n    }));\n    return {\n      orgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar informações:\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"Detalhes do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erro ao buscar informações do órgão.\");\n    } else {\n      throw new Error(\"Erro na API ao buscar informações do órgão. (COD 500)\");\n    }\n  }\n};","map":{"version":3,"names":["axios","isValidCnpj","cnpj","cnpjRegex","test","fetchOrgaoInfo","dataInicial","dataFinal","pagina","Error","startDate","Date","endDate","console","log","formattedDataInicial","replace","formattedDataFinal","response","get","params","cnpjOrgao","data","length","orgao","razaoSocial","orgaoEntidade","ufNome","unidadeOrgao","municipioNome","contratos","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","cnpjFornecedor","niFornecedor","error","isAxiosError","_error$response","_error$response2","_error$response2$data","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\";\r\n\r\n// verificar se o CNPJ tem 14 digitos\r\nconst isValidCnpj = (cnpj: string): boolean => {\r\n  const cnpjRegex = /^\\d{14}$/; \r\n  return cnpjRegex.test(cnpj);\r\n};\r\n\r\n// busca as informacoes de contratos do orgao\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number\r\n): Promise<{ orgao: InfoOrgao; contratos: InfoContrato[] }> => {\r\n\r\n  //erro se o CNPJ for inválido\r\n  if (!isValidCnpj(cnpj)) {\r\n    throw new Error(\"CNPJ inválido.\");\r\n  }\r\n\r\n  // valida o formato da data \r\n  const startDate = new Date(dataInicial);\r\n  const endDate = new Date(dataFinal);\r\n\r\n  console.log(\"CNPJ:\", cnpj);\r\n  console.log(\"Data Inicial:\", dataInicial);\r\n  console.log(\"Data Final:\", dataFinal);\r\n\r\n  if (startDate > endDate) {\r\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\r\n  }\r\n\r\n  // Formatando as datas no padrão esperado (YYYYMMDD)\r\n  const formattedDataInicial = dataInicial.replace(/-/g, \"\");\r\n  const formattedDataFinal = dataFinal.replace(/-/g, \"\");\r\n\r\n  try {\r\n    const response = await axios.get(\r\n      `https://pncp.gov.br/api/consulta/v1/contratos`,\r\n      {\r\n        params: {\r\n          cnpjOrgao: cnpj, // Corrigido para cnpjOrgao\r\n          dataInicial: formattedDataInicial,\r\n          dataFinal: formattedDataFinal,\r\n          pagina,\r\n        },\r\n      }\r\n    );\r\n\r\n    // Log da resposta completa\r\n    console.log(\"Resposta da API:\", response.data);\r\n\r\n    if (!response.data.data || response.data.data.length === 0) {\r\n      throw new Error(\"Nenhum contrato encontrado para o CNPJ informado.\");\r\n    }\r\n\r\n    // Extrair dados do órgão a partir do primeiro contrato retornado\r\n    const orgao: InfoOrgao = {\r\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\r\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    // Extrair dados dos contratos\r\n    const contratos: InfoContrato[] = response.data.data.map(\r\n      (contrato: any) => ({\r\n        numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n        dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n        dataVigenciaFim: contrato.dataVigenciaFim,\r\n        nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n        objetoContrato: contrato.objetoContrato,\r\n        valorInicial: contrato.valorInicial,\r\n        cnpjFornecedor: contrato.niFornecedor,\r\n      })\r\n    );\r\n\r\n    return { orgao, contratos };\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar informações:\", error);\r\n\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Detalhes do erro:\", error.response?.data);\r\n      throw new Error(\r\n        error.response?.data?.message || \"Erro ao buscar informações do órgão.\"\r\n      );\r\n    } else {\r\n      throw new Error(\"Erro na API ao buscar informações do órgão. (COD 500)\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}