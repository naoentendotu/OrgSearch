{"ast":null,"code":"import axios from \"axios\"; // Importando axios\n\n// Importando interfaces\n\nconst url_api = \"https://pncp.gov.br/api/consulta/v1/contratos\"; // Definindo a URL da API\n\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina = 1) => {\n  const formattedDataInicial = new Date(dataInicial).toISOString().split('T')[0]; // Formata a data inicial\n  const formattedDataFinal = new Date(dataFinal).toISOString().split('T')[0]; // Formata a data final\n\n  try {\n    const response = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n    console.log(\"Dados da API\", response.data);\n    if (response.data.data.length === 0) {\n      console.error(\"Nenhum dado encontrado.\");\n      return {\n        orgao: null,\n        contratos: []\n      };\n    }\n    const orgao = response.data.data[0].orgaoEntidade;\n    const unidadeOrgao = response.data.data[0].unidadeOrgao;\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      poderId: orgao.poderId,\n      esferaId: orgao.esferaId,\n      ufNome: unidadeOrgao.ufNome,\n      // Preenchendo a propriedade ufNome\n      municipioNome: unidadeOrgao.municipioNome // Preenchendo a propriedade municipioNome\n    };\n\n    // Filtrando contratos pelo CNPJ e pelas datas de vigência\n    const contratos = response.data.data.flatMap(item => item.contratos) // Obtendo todos os contratos\n    .filter(contrato => {\n      const vigenciaInicio = new Date(contrato.dataVigenciaInicio);\n      const vigenciaFim = new Date(contrato.dataVigenciaFim);\n      const inicio = new Date(formattedDataInicial);\n      const fim = new Date(formattedDataFinal);\n      return contrato.orgaoEntidade.cnpj === cnpj && vigenciaInicio >= inicio && vigenciaFim <= fim;\n    });\n    if (contratos.length === 0) {\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\n      return {\n        orgao: infoOrgao,\n        contratos: []\n      };\n    }\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro na busca de dados do órgão!\", error);\n    return {\n      orgao: null,\n      contratos: []\n    };\n  }\n};","map":{"version":3,"names":["axios","url_api","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","formattedDataInicial","Date","toISOString","split","formattedDataFinal","response","get","params","console","log","data","length","error","orgao","contratos","orgaoEntidade","unidadeOrgao","infoOrgao","razaoSocial","poderId","esferaId","ufNome","municipioNome","flatMap","item","filter","contrato","vigenciaInicio","dataVigenciaInicio","vigenciaFim","dataVigenciaFim","inicio","fim"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from \"axios\"; // Importando axios\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\"; // Importando interfaces\r\n\r\nconst url_api = \"https://pncp.gov.br/api/consulta/v1/contratos\"; // Definindo a URL da API\r\n\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number = 1\r\n) => {\r\n  const formattedDataInicial = new Date(dataInicial).toISOString().split('T')[0]; // Formata a data inicial\r\n  const formattedDataFinal = new Date(dataFinal).toISOString().split('T')[0]; // Formata a data final\r\n\r\n  try {\r\n    const response = await axios.get<{\r\n      data: {\r\n        orgaoEntidade: {\r\n          cnpj: string;\r\n          razaoSocial: string;\r\n          poderId: string;\r\n          esferaId: string;\r\n        };\r\n        unidadeOrgao: { \r\n          ufNome: string; \r\n          municipioNome: string; \r\n        };\r\n        contratos: InfoContrato[]; \r\n      }[];\r\n      totalRegistros: number;\r\n      totalPaginas: number;\r\n      numeroPagina: number;\r\n      paginasRestantes: number;\r\n      empty: boolean;\r\n    }>(url_api, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial: formattedDataInicial,\r\n        dataFinal: formattedDataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    console.log(\"Dados da API\", response.data);\r\n\r\n    if (response.data.data.length === 0) {\r\n      console.error(\"Nenhum dado encontrado.\");\r\n      return { orgao: null, contratos: [] };\r\n    }\r\n\r\n    const orgao = response.data.data[0].orgaoEntidade;\r\n    const unidadeOrgao = response.data.data[0].unidadeOrgao;\r\n\r\n    const infoOrgao: InfoOrgao = {\r\n      razaoSocial: orgao.razaoSocial,\r\n      cnpj: orgao.cnpj,\r\n      poderId: orgao.poderId,\r\n      esferaId: orgao.esferaId,\r\n      ufNome: unidadeOrgao.ufNome,  // Preenchendo a propriedade ufNome\r\n      municipioNome: unidadeOrgao.municipioNome,  // Preenchendo a propriedade municipioNome\r\n    };\r\n\r\n    // Filtrando contratos pelo CNPJ e pelas datas de vigência\r\n    const contratos: InfoContrato[] = response.data.data\r\n      .flatMap(item => item.contratos) // Obtendo todos os contratos\r\n      .filter(contrato => {\r\n        const vigenciaInicio = new Date(contrato.dataVigenciaInicio);\r\n        const vigenciaFim = new Date(contrato.dataVigenciaFim);\r\n        const inicio = new Date(formattedDataInicial);\r\n        const fim = new Date(formattedDataFinal);\r\n        return (\r\n          contrato.orgaoEntidade.cnpj === cnpj && \r\n          vigenciaInicio >= inicio && \r\n          vigenciaFim <= fim\r\n        );\r\n      });\r\n\r\n    if (contratos.length === 0) {\r\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\r\n      return { orgao: infoOrgao, contratos: [] }; \r\n    }\r\n\r\n    return { orgao: infoOrgao, contratos };\r\n\r\n  } catch (error: unknown) {\r\n    console.error(\"Erro na busca de dados do órgão!\", error);\r\n    return { orgao: null, contratos: [] }; \r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}