{"ast":null,"code":"import axios from 'axios';\n\n// Tipos para as informações do órgão e contratos\n\n// Função para buscar informações do órgão e contratos\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  // Montar a URL da API\n  const url = `https://pncp.gov.br/api/consulta/v1/contratos?cnpj=${cnpj}&dataInicial=${dataInicial}&dataFinal=${dataFinal}&pagina=${pagina}`;\n  try {\n    const response = await axios.get(url);\n    return {\n      orgao: response.data.data.length > 0 ? response.data.data[0].orgaoEntidade : null,\n      contratos: response.data.data || []\n    };\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      console.error(\"Erro ao buscar informações do órgão:\", error.response.data);\n    } else {\n      console.error(\"Erro desconhecido:\", error);\n    }\n    throw new Error(\"Falha ao buscar dados da API.\");\n  }\n};","map":{"version":3,"names":["axios","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","url","response","get","orgao","data","length","orgaoEntidade","contratos","error","isAxiosError","console","Error"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Tipos para as informações do órgão e contratos\r\nexport interface InfoOrgao {\r\n  cnpj: string;\r\n  razaoSocial: string;\r\n  // adicione outros campos necessários\r\n}\r\n\r\nexport interface InfoContrato {\r\n  numeroControlePncpCompra: string;\r\n  dataVigenciaInicio: string;\r\n  dataVigenciaFim: string;\r\n  nomeRazaoSocialFornecedor: string;\r\n  objetoContrato: string;\r\n  valorInicial: number;\r\n  // adicione outros campos necessários\r\n}\r\n\r\n// Função para buscar informações do órgão e contratos\r\nexport const fetchOrgaoInfo = async (cnpj: string, dataInicial: string, dataFinal: string, pagina: number) => {\r\n  // Montar a URL da API\r\n  const url = `https://pncp.gov.br/api/consulta/v1/contratos?cnpj=${cnpj}&dataInicial=${dataInicial}&dataFinal=${dataFinal}&pagina=${pagina}`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n\r\n    return {\r\n      orgao: response.data.data.length > 0 ? response.data.data[0].orgaoEntidade : null,\r\n      contratos: response.data.data || [],\r\n    };\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      console.error(\"Erro ao buscar informações do órgão:\", error.response.data);\r\n    } else {\r\n      console.error(\"Erro desconhecido:\", error);\r\n    }\r\n    throw new Error(\"Falha ao buscar dados da API.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAiBA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAiB,EAAEC,MAAc,KAAK;EAC5G;EACA,MAAMC,GAAG,GAAG,sDAAsDJ,IAAI,gBAAgBC,WAAW,cAAcC,SAAS,WAAWC,MAAM,EAAE;EAE3I,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACF,GAAG,CAAC;IAErC,OAAO;MACLG,KAAK,EAAEF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGJ,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACE,aAAa,GAAG,IAAI;MACjFC,SAAS,EAAEN,QAAQ,CAACG,IAAI,CAACA,IAAI,IAAI;IACnC,CAAC;EACH,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,IAAId,KAAK,CAACe,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACP,QAAQ,EAAE;MAC/CS,OAAO,CAACF,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAACP,QAAQ,CAACG,IAAI,CAAC;IAC5E,CAAC,MAAM;MACLM,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;IACA,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}