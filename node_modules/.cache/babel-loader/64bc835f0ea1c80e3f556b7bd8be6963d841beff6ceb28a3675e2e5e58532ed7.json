{"ast":null,"code":"// src/api/pncpAPI.ts\n\nimport axios from \"axios\";\n// Função para validar o CNPJ\nconst isValidCnpj = cnpj => {\n  // Implemente sua lógica de validação de CNPJ\n  // Aqui está uma implementação simples para validar o formato\n  const cnpjRegex = /^\\d{14}$/; // Apenas verifica se possui 14 dígitos\n  return cnpjRegex.test(cnpj);\n};\n\n// Função para buscar informações do órgão e contratos\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  // Verificação dos dados de entrada\n  if (!isValidCnpj(cnpj)) {\n    throw new Error(\"CNPJ inválido.\");\n  }\n  if (new Date(dataInicial) > new Date(dataFinal)) {\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\n  }\n  try {\n    console.log(\"Parâmetros da requisição:\", {\n      cnpj,\n      dataInicial,\n      dataFinal,\n      pagina\n    });\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n      params: {\n        cnpj,\n        dataInicial,\n        dataFinal,\n        pagina\n      }\n    });\n\n    // Extrair dados do órgão\n    const orgao = {\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\n      poderId: response.data.data[0].orgaoEntidade.poderId,\n      esferaId: response.data.data[0].orgaoEntidade.esferaId,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Extrair dados dos contratos\n    const contratos = response.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial\n    }));\n    return {\n      orgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar informações:\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"Detalhes do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erro ao buscar informações do órgão.\");\n    } else {\n      throw new Error(\"Erro ao buscar informações do órgão.\");\n    }\n  }\n};","map":{"version":3,"names":["axios","isValidCnpj","cnpj","cnpjRegex","test","fetchOrgaoInfo","dataInicial","dataFinal","pagina","Error","Date","console","log","response","get","params","orgao","razaoSocial","data","orgaoEntidade","poderId","esferaId","ufNome","unidadeOrgao","municipioNome","contratos","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","error","isAxiosError","_error$response","_error$response2","_error$response2$data","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["// src/api/pncpAPI.ts\r\n\r\nimport axios from \"axios\";\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\";\r\n\r\n// Função para validar o CNPJ\r\nconst isValidCnpj = (cnpj: string): boolean => {\r\n  // Implemente sua lógica de validação de CNPJ\r\n  // Aqui está uma implementação simples para validar o formato\r\n  const cnpjRegex = /^\\d{14}$/; // Apenas verifica se possui 14 dígitos\r\n  return cnpjRegex.test(cnpj);\r\n};\r\n\r\n// Função para buscar informações do órgão e contratos\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number\r\n) => {\r\n  // Verificação dos dados de entrada\r\n  if (!isValidCnpj(cnpj)) {\r\n    throw new Error(\"CNPJ inválido.\");\r\n  }\r\n\r\n  if (new Date(dataInicial) > new Date(dataFinal)) {\r\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\r\n  }\r\n\r\n  try {\r\n    console.log(\"Parâmetros da requisição:\", { cnpj, dataInicial, dataFinal, pagina });\r\n\r\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial,\r\n        dataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    // Extrair dados do órgão\r\n    const orgao: InfoOrgao = {\r\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\r\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\r\n      poderId: response.data.data[0].orgaoEntidade.poderId,\r\n      esferaId: response.data.data[0].orgaoEntidade.esferaId,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    // Extrair dados dos contratos\r\n    const contratos: InfoContrato[] = response.data.data.map((contrato: any) => ({\r\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n      dataVigenciaFim: contrato.dataVigenciaFim,\r\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n      objetoContrato: contrato.objetoContrato,\r\n      valorInicial: contrato.valorInicial,\r\n    }));\r\n\r\n    return { orgao, contratos };\r\n  } catch (error: unknown) {\r\n    console.error(\"Erro ao buscar informações:\", error);\r\n\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Detalhes do erro:\", error.response?.data);\r\n      throw new Error(error.response?.data?.message || \"Erro ao buscar informações do órgão.\");\r\n    } else {\r\n      throw new Error(\"Erro ao buscar informações do órgão.\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}