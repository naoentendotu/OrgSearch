{"ast":null,"code":"import axios from 'axios';\nconst formatDate = dateString => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Mês começa em 0\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}${month}${day}`; // Formato yyyymmdd\n};\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  const url = `https://pncp.gov.br/api/consulta/v1/contratos`;\n  const params = {\n    cnpj,\n    dataInicial: formatDate(dataInicial),\n    // Formata a data inicial\n    dataFinal: formatDate(dataFinal),\n    // Formata a data final\n    pagina\n  };\n  try {\n    const response = await axios.get(url, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    // Asserção de tipo\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2;\n      console.error(\"Erro ao buscar informações do órgão:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.message) || \"Erro ao buscar informações.\");\n    } else {\n      console.error(\"Erro desconhecido:\", error);\n      throw new Error(\"Erro ao buscar informações.\");\n    }\n  }\n};","map":{"version":3,"names":["axios","formatDate","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","url","params","response","get","data","error","isAxiosError","_error$response","_error$response2","console","Error","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { InfoOrgao, InfoContrato } from '../tipos/index';\r\n\r\nconst formatDate = (dateString: string) => {\r\n  if (!dateString) return '';\r\n  const date = new Date(dateString);\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Mês começa em 0\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  return `${year}${month}${day}`; // Formato yyyymmdd\r\n};\r\n\r\nexport const fetchOrgaoInfo = async (cnpj: string, dataInicial: string, dataFinal: string, pagina: number) => {\r\n  const url = `https://pncp.gov.br/api/consulta/v1/contratos`;\r\n  const params = {\r\n    cnpj,\r\n    dataInicial: formatDate(dataInicial), // Formata a data inicial\r\n    dataFinal: formatDate(dataFinal), // Formata a data final\r\n    pagina,\r\n  };\r\n\r\n  try {\r\n    const response = await axios.get(url, { params });\r\n    return response.data;\r\n  } catch (error: unknown) { // Asserção de tipo\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Erro ao buscar informações do órgão:\", error.response?.data);\r\n      throw new Error(error.response?.data.message || \"Erro ao buscar informações.\");\r\n    } else {\r\n      console.error(\"Erro desconhecido:\", error);\r\n      throw new Error(\"Erro ao buscar informações.\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,UAAU,GAAIC,UAAkB,IAAK;EACzC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAC1B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMG,IAAI,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACL,IAAI,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACL,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,OAAO,GAAGL,IAAI,GAAGE,KAAK,GAAGI,GAAG,EAAE,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAiB,EAAEC,MAAc,KAAK;EAC5G,MAAMC,GAAG,GAAG,+CAA+C;EAC3D,MAAMC,MAAM,GAAG;IACbL,IAAI;IACJC,WAAW,EAAEd,UAAU,CAACc,WAAW,CAAC;IAAE;IACtCC,SAAS,EAAEf,UAAU,CAACe,SAAS,CAAC;IAAE;IAClCC;EACF,CAAC;EAED,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAACH,GAAG,EAAE;MAAEC;IAAO,CAAC,CAAC;IACjD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAc,EAAE;IAAE;IACzB,IAAIvB,KAAK,CAACwB,YAAY,CAACD,KAAK,CAAC,EAAE;MAAA,IAAAE,eAAA,EAAAC,gBAAA;MAC7BC,OAAO,CAACJ,KAAK,CAAC,sCAAsC,GAAAE,eAAA,GAAEF,KAAK,CAACH,QAAQ,cAAAK,eAAA,uBAAdA,eAAA,CAAgBH,IAAI,CAAC;MAC3E,MAAM,IAAIM,KAAK,CAAC,EAAAF,gBAAA,GAAAH,KAAK,CAACH,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBJ,IAAI,CAACO,OAAO,KAAI,6BAA6B,CAAC;IAChF,CAAC,MAAM;MACLF,OAAO,CAACJ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAM,IAAIK,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}