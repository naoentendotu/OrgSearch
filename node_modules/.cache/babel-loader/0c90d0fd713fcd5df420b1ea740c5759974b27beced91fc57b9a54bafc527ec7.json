{"ast":null,"code":"import axios from 'axios';\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\nexport const fetchOrgaoAndContratos = async (cnpj, dataInicial, dataFinal) => {\n  try {\n    // Requisição para a API\n    const resposta = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial,\n        dataFinal\n      }\n    });\n    console.log('Dados da API:', resposta.data); // Verifique a estrutura da resposta\n\n    // Verifique se há dados retornados\n    if (resposta.data.empty) {\n      return {\n        orgao: null,\n        contratos: []\n      }; // Nenhum dado encontrado\n    }\n\n    // Adquirindo informações do órgão (considerando o primeiro órgão retornado)\n    const orgao = resposta.data.data[0].orgaoEntidade; // Altere conforme necessário para o órgão correto\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      ufNome: resposta.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: resposta.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Adquirindo informações dos contratos\n    const contratos = resposta.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial\n    }));\n\n    // Retorna as informações do órgão e contratos\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    console.error('Erro na busca de dados do órgão e contratos!', error);\n    if (error.response) {\n      console.error('Dados do erro:', error.response.data);\n    }\n    return null;\n  }\n};","map":{"version":3,"names":["axios","url_api","fetchOrgaoAndContratos","cnpj","dataInicial","dataFinal","resposta","get","params","console","log","data","empty","orgao","contratos","orgaoEntidade","infoOrgao","razaoSocial","ufNome","unidadeOrgao","municipioNome","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","error","response"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { InfoOrgao, InfoContrato } from '../tipos/index';\r\n\r\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\r\n\r\nexport const fetchOrgaoAndContratos = async (cnpj: string, dataInicial: string, dataFinal: string) => {\r\n    try {\r\n        // Requisição para a API\r\n        const resposta = await axios.get(url_api, {\r\n            params: {\r\n                cnpj,\r\n                dataInicial,\r\n                dataFinal,\r\n            },\r\n        });\r\n\r\n        console.log('Dados da API:', resposta.data); // Verifique a estrutura da resposta\r\n\r\n        // Verifique se há dados retornados\r\n        if (resposta.data.empty) {\r\n            return { orgao: null, contratos: [] }; // Nenhum dado encontrado\r\n        }\r\n\r\n        // Adquirindo informações do órgão (considerando o primeiro órgão retornado)\r\n        const orgao = resposta.data.data[0].orgaoEntidade; // Altere conforme necessário para o órgão correto\r\n        const infoOrgao: InfoOrgao = {\r\n            razaoSocial: orgao.razaoSocial,\r\n            cnpj: orgao.cnpj,\r\n            ufNome: resposta.data.data[0].unidadeOrgao.ufNome,\r\n            municipioNome: resposta.data.data[0].unidadeOrgao.municipioNome,\r\n        };\r\n\r\n        // Adquirindo informações dos contratos\r\n        const contratos: InfoContrato[] = resposta.data.data.map((contrato: any) => ({\r\n            numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n            dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n            dataVigenciaFim: contrato.dataVigenciaFim,\r\n            nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n            objetoContrato: contrato.objetoContrato,\r\n            valorInicial: contrato.valorInicial,\r\n        }));\r\n\r\n        // Retorna as informações do órgão e contratos\r\n        return { orgao: infoOrgao, contratos };\r\n\r\n    } catch (error) {\r\n        console.error('Erro na busca de dados do órgão e contratos!', error);\r\n        if (error.response) {\r\n            console.error('Dados do erro:', error.response.data);\r\n        }\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,+CAA+C;AAE/D,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAiB,KAAK;EAClG,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACN,OAAO,EAAE;MACtCO,MAAM,EAAE;QACJL,IAAI;QACJC,WAAW;QACXC;MACJ;IACJ,CAAC,CAAC;IAEFI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;;IAE7C;IACA,IAAIL,QAAQ,CAACK,IAAI,CAACC,KAAK,EAAE;MACrB,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAG,CAAC,CAAC,CAAC;IAC3C;;IAEA;IACA,MAAMD,KAAK,GAAGP,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACI,aAAa,CAAC,CAAC;IACnD,MAAMC,SAAoB,GAAG;MACzBC,WAAW,EAAEJ,KAAK,CAACI,WAAW;MAC9Bd,IAAI,EAAEU,KAAK,CAACV,IAAI;MAChBe,MAAM,EAAEZ,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACQ,YAAY,CAACD,MAAM;MACjDE,aAAa,EAAEd,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACQ,YAAY,CAACC;IACtD,CAAC;;IAED;IACA,MAAMN,SAAyB,GAAGR,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACU,GAAG,CAAEC,QAAa,KAAM;MACzEC,qBAAqB,EAAED,QAAQ,CAACC,qBAAqB;MACrDC,kBAAkB,EAAEF,QAAQ,CAACE,kBAAkB;MAC/CC,eAAe,EAAEH,QAAQ,CAACG,eAAe;MACzCC,yBAAyB,EAAEJ,QAAQ,CAACI,yBAAyB;MAC7DC,cAAc,EAAEL,QAAQ,CAACK,cAAc;MACvCC,YAAY,EAAEN,QAAQ,CAACM;IAC3B,CAAC,CAAC,CAAC;;IAEH;IACA,OAAO;MAAEf,KAAK,EAAEG,SAAS;MAAEF;IAAU,CAAC;EAE1C,CAAC,CAAC,OAAOe,KAAK,EAAE;IACZpB,OAAO,CAACoB,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,IAAIA,KAAK,CAACC,QAAQ,EAAE;MAChBrB,OAAO,CAACoB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACC,QAAQ,CAACnB,IAAI,CAAC;IACxD;IACA,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}