{"ast":null,"code":"import axios from 'axios';\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina = 1) => {\n  // Formata as datas no formato yyyyMMdd\n  const formattedDataInicial = dataInicial.replace(/-/g, \"\");\n  const formattedDataFinal = dataFinal.replace(/-/g, \"\");\n  try {\n    const response = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n    console.log(\"Dados da API\", response.data); // Log da resposta\n\n    if (response.data.data.length === 0) {\n      console.error(\"Nenhum dado encontrado.\");\n      return {\n        orgao: null,\n        contratos: []\n      };\n    }\n    const orgao = response.data.data[0].orgaoEntidade;\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      poderId: orgao.poderId,\n      esferaId: orgao.esferaId,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n    const contratos = response.data.data[0].contratos || [];\n    if (contratos.length === 0) {\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\n      return {\n        orgao: infoOrgao,\n        contratos: []\n      };\n    }\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro na busca de dados do órgão!\", error);\n    return {\n      orgao: null,\n      contratos: []\n    };\n  }\n};","map":{"version":3,"names":["axios","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","formattedDataInicial","replace","formattedDataFinal","response","get","url_api","params","console","log","data","length","error","orgao","contratos","orgaoEntidade","infoOrgao","razaoSocial","poderId","esferaId","ufNome","unidadeOrgao","municipioNome"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number = 1\r\n) => {\r\n  // Formata as datas no formato yyyyMMdd\r\n  const formattedDataInicial = dataInicial.replace(/-/g, \"\"); \r\n  const formattedDataFinal = dataFinal.replace(/-/g, \"\"); \r\n\r\n  try {\r\n    const response = await axios.get<{\r\n      data: {\r\n        orgaoEntidade: {\r\n          razaoSocial: string;\r\n          cnpj: string;\r\n          poderId: string;\r\n          esferaId: string;\r\n        };\r\n        unidadeOrgao: { ufNome: string; municipioNome: string; };\r\n        contratos: InfoContrato[]; \r\n      }[];\r\n      totalRegistros: number;\r\n      totalPaginas: number;\r\n      numeroPagina: number;\r\n      paginasRestantes: number;\r\n      empty: boolean;\r\n    }>(url_api, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial: formattedDataInicial,\r\n        dataFinal: formattedDataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    console.log(\"Dados da API\", response.data); // Log da resposta\r\n\r\n    if (response.data.data.length === 0) {\r\n      console.error(\"Nenhum dado encontrado.\");\r\n      return { orgao: null, contratos: [] };\r\n    }\r\n\r\n    const orgao = response.data.data[0].orgaoEntidade;\r\n    const infoOrgao: InfoOrgao = {\r\n      razaoSocial: orgao.razaoSocial,\r\n      cnpj: orgao.cnpj,\r\n      poderId: orgao.poderId,\r\n      esferaId: orgao.esferaId,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    const contratos: InfoContrato[] = response.data.data[0].contratos || [];\r\n    if (contratos.length === 0) {\r\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\r\n      return { orgao: infoOrgao, contratos: [] }; \r\n    }\r\n\r\n    return { orgao: infoOrgao, contratos };\r\n\r\n  } catch (error: unknown) {\r\n    console.error(\"Erro na busca de dados do órgão!\", error);\r\n    return { orgao: null, contratos: [] }; \r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAC5BC,IAAY,EACZC,WAAmB,EACnBC,SAAiB,EACjBC,MAAc,GAAG,CAAC,KACf;EACH;EACA,MAAMC,oBAAoB,GAAGH,WAAW,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC1D,MAAMC,kBAAkB,GAAGJ,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAEtD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAgB7BC,OAAO,EAAE;MACVC,MAAM,EAAE;QACNV,IAAI;QACJC,WAAW,EAAEG,oBAAoB;QACjCF,SAAS,EAAEI,kBAAkB;QAC7BH;MACF;IACF,CAAC,CAAC;IAEFQ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;;IAE5C,IAAIN,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACnCH,OAAO,CAACI,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAG,CAAC;IACvC;IAEA,MAAMD,KAAK,GAAGT,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACK,aAAa;IACjD,MAAMC,SAAoB,GAAG;MAC3BC,WAAW,EAAEJ,KAAK,CAACI,WAAW;MAC9BpB,IAAI,EAAEgB,KAAK,CAAChB,IAAI;MAChBqB,OAAO,EAAEL,KAAK,CAACK,OAAO;MACtBC,QAAQ,EAAEN,KAAK,CAACM,QAAQ;MACxBC,MAAM,EAAEhB,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACW,YAAY,CAACD,MAAM;MACjDE,aAAa,EAAElB,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACW,YAAY,CAACC;IACpD,CAAC;IAED,MAAMR,SAAyB,GAAGV,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACI,SAAS,IAAI,EAAE;IACvE,IAAIA,SAAS,CAACH,MAAM,KAAK,CAAC,EAAE;MAC1BH,OAAO,CAACI,KAAK,CAAC,0CAA0C,CAAC;MACzD,OAAO;QAAEC,KAAK,EAAEG,SAAS;QAAEF,SAAS,EAAE;MAAG,CAAC;IAC5C;IAEA,OAAO;MAAED,KAAK,EAAEG,SAAS;MAAEF;IAAU,CAAC;EAExC,CAAC,CAAC,OAAOF,KAAc,EAAE;IACvBJ,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO;MAAEC,KAAK,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAG,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}