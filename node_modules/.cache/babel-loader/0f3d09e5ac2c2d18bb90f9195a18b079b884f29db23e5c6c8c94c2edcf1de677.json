{"ast":null,"code":"// src/api/pncpAPI.ts\nimport axios from \"axios\";\n// Função para validar o CNPJ\nconst isValidCnpj = cnpj => {\n  const cnpjRegex = /^\\d{14}$/; // Verifica se possui 14 dígitos\n  return cnpjRegex.test(cnpj);\n};\n\n// Função para buscar informações do órgão e contratos\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  // Verificação dos dados de entrada\n  if (!isValidCnpj(cnpj)) {\n    throw new Error(\"CNPJ inválido.\");\n  }\n\n  // Validar e formatar datas\n  const startDate = new Date(dataInicial);\n  const endDate = new Date(dataFinal);\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n    throw new Error(\"Formato de data inválido. Use 'YYYY-MM-DD'.\");\n  }\n  if (startDate > endDate) {\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\n  }\n\n  // Formatando as datas no padrão esperado (YYYYMMDD)\n  const formattedDataInicial = dataInicial.replace(/-/g, '');\n  const formattedDataFinal = dataFinal.replace(/-/g, '');\n  try {\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n\n    // Extrair dados do órgão\n    const orgao = {\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Extrair dados dos contratos\n    const contratos = response.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial\n    }));\n    return {\n      orgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar informações:\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"Detalhes do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erro ao buscar informações do órgão.\");\n    } else {\n      throw new Error(\"Erro ao buscar informações do órgão.\");\n    }\n  }\n};","map":{"version":3,"names":["axios","isValidCnpj","cnpj","cnpjRegex","test","fetchOrgaoInfo","dataInicial","dataFinal","pagina","Error","startDate","Date","endDate","isNaN","getTime","formattedDataInicial","replace","formattedDataFinal","response","get","params","orgao","razaoSocial","data","orgaoEntidade","ufNome","unidadeOrgao","municipioNome","contratos","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","error","console","isAxiosError","_error$response","_error$response2","_error$response2$data","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["// src/api/pncpAPI.ts\r\nimport axios from \"axios\";\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\";\r\n\r\n// Função para validar o CNPJ\r\nconst isValidCnpj = (cnpj: string): boolean => {\r\n  const cnpjRegex = /^\\d{14}$/; // Verifica se possui 14 dígitos\r\n  return cnpjRegex.test(cnpj);\r\n};\r\n\r\n// Função para buscar informações do órgão e contratos\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number\r\n): Promise<{ orgao: InfoOrgao; contratos: InfoContrato[] }> => {\r\n  // Verificação dos dados de entrada\r\n  if (!isValidCnpj(cnpj)) {\r\n    throw new Error(\"CNPJ inválido.\");\r\n  }\r\n\r\n  // Validar e formatar datas\r\n  const startDate = new Date(dataInicial);\r\n  const endDate = new Date(dataFinal);\r\n\r\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n    throw new Error(\"Formato de data inválido. Use 'YYYY-MM-DD'.\");\r\n  }\r\n\r\n  if (startDate > endDate) {\r\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\r\n  }\r\n\r\n  // Formatando as datas no padrão esperado (YYYYMMDD)\r\n  const formattedDataInicial = dataInicial.replace(/-/g, '');\r\n  const formattedDataFinal = dataFinal.replace(/-/g, '');\r\n\r\n\r\n  try {\r\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial: formattedDataInicial,\r\n        dataFinal: formattedDataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    // Extrair dados do órgão\r\n    const orgao: InfoOrgao = {\r\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\r\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    // Extrair dados dos contratos\r\n    const contratos: InfoContrato[] = response.data.data.map((contrato: any) => ({\r\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n      dataVigenciaFim: contrato.dataVigenciaFim,\r\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n      objetoContrato: contrato.objetoContrato,\r\n      valorInicial: contrato.valorInicial,\r\n    }));\r\n\r\n    return { orgao, contratos };\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar informações:\", error);\r\n\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Detalhes do erro:\", error.response?.data);\r\n      throw new Error(error.response?.data?.message || \"Erro ao buscar informações do órgão.\");\r\n    } else {\r\n      throw new Error(\"Erro ao buscar informações do órgão.\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}