{"ast":null,"code":"import axios from 'axios';\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\nconst fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina = 1) => {\n  // Formatar as datas para 'yyyymmdd'\n  const formattedDataInicial = new Date(dataInicial).toISOString().slice(0, 10).replace(/-/g, '');\n  const formattedDataFinal = new Date(dataFinal).toISOString().slice(0, 10).replace(/-/g, '');\n  try {\n    const response = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n    if (response.data.data.length === 0) {\n      console.error(\"Nenhum órgão encontrado para o CNPJ informado.\");\n      return {\n        orgao: null,\n        contratos: []\n      };\n    }\n    const orgao = response.data.data[0].orgaoEntidade;\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      poderId: orgao.poderId,\n      esferaId: orgao.esferaId,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n    const contratos = response.data.data[0].contratos || [];\n    if (contratos.length === 0) {\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\n      return {\n        orgao: infoOrgao,\n        contratos: []\n      };\n    }\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response;\n      console.error(\"Erro na busca de dados do órgão!\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    } else {\n      console.error(\"Erro inesperado:\", error);\n    }\n    return {\n      orgao: null,\n      contratos: []\n    };\n  }\n};\nexport default fetchOrgaoInfo;","map":{"version":3,"names":["axios","url_api","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","formattedDataInicial","Date","toISOString","slice","replace","formattedDataFinal","response","get","params","data","length","console","error","orgao","contratos","orgaoEntidade","infoOrgao","razaoSocial","poderId","esferaId","ufNome","unidadeOrgao","municipioNome","isAxiosError","_error$response"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\r\n\r\nexport interface InfoContrato {\r\n  codigoPaisFornecedor: string;\r\n  numeroControlePncpCompra: string;\r\n  orgaoSubRogado: string | null;\r\n  orgaoEntidade: {\r\n    cnpj: string;\r\n    razaoSocial: string;\r\n    poderId: string;\r\n    esferaId: string;\r\n  };\r\n  anoContrato: number;\r\n  tipoContrato: {\r\n    id: number;\r\n    nome: string;\r\n  };\r\n  numeroContratoEmpenho: string;\r\n  dataAssinatura: string;\r\n  dataVigenciaInicio: string;\r\n  dataVigenciaFim: string;\r\n  niFornecedor: string;\r\n  tipoPessoa: string;\r\n  categoriaProcesso: {\r\n    id: number;\r\n    nome: string;\r\n  };\r\n  dataPublicacaoPncp: string;\r\n  dataAtualizacao: string;\r\n  sequencialContrato: number;\r\n  unidadeOrgao: {\r\n    ufNome: string;\r\n    codigoUnidade: string;\r\n    nomeUnidade: string;\r\n    ufSigla: string;\r\n    municipioNome: string;\r\n    codigoIbge: string;\r\n  };\r\n  informacaoComplementar: string | null;\r\n  processo: string;\r\n  unidadeSubRogada: string | null;\r\n  nomeRazaoSocialFornecedor: string;\r\n  niFornecedorSubContratado: string | null;\r\n  nomeFornecedorSubContratado: string | null;\r\n  valorParcela: number;\r\n  valorGlobal: number;\r\n  valorAcumulado: number;\r\n  numeroRetificacao: number;\r\n  identificadorCipi: string | null;\r\n  urlCipi: string | null;\r\n  numeroControlePNCP: string;\r\n  receita: boolean;\r\n  tipoPessoaSubContratada: string | null;\r\n  objetoContrato: string;\r\n  valorInicial: number;\r\n  numeroParcelas: number;\r\n  usuarioNome: string;\r\n}\r\n\r\nexport interface InfoOrgao {\r\n  razaoSocial: string;\r\n  cnpj: string;\r\n  poderId: string;\r\n  esferaId: string;\r\n  ufNome: string;\r\n  municipioNome: string;\r\n}\r\n\r\nconst fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number = 1\r\n) => {\r\n  // Formatar as datas para 'yyyymmdd'\r\n  const formattedDataInicial = new Date(dataInicial).toISOString().slice(0, 10).replace(/-/g, ''); \r\n  const formattedDataFinal = new Date(dataFinal).toISOString().slice(0, 10).replace(/-/g, ''); \r\n\r\n  try {\r\n    const response = await axios.get<{\r\n      data: {\r\n        orgaoEntidade: {\r\n          cnpj: string;\r\n          razaoSocial: string;\r\n          poderId: string;\r\n          esferaId: string;\r\n        };\r\n        unidadeOrgao: { \r\n          ufNome: string; \r\n          municipioNome: string; \r\n        };\r\n        contratos: InfoContrato[]; \r\n      }[];\r\n      totalRegistros: number;\r\n      totalPaginas: number;\r\n      numeroPagina: number;\r\n      paginasRestantes: number;\r\n      empty: boolean;\r\n    }>(url_api, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial: formattedDataInicial,\r\n        dataFinal: formattedDataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    if (response.data.data.length === 0) {\r\n      console.error(\"Nenhum órgão encontrado para o CNPJ informado.\");\r\n      return { orgao: null, contratos: [] };\r\n    }\r\n\r\n    const orgao = response.data.data[0].orgaoEntidade;\r\n    const infoOrgao: InfoOrgao = {\r\n      razaoSocial: orgao.razaoSocial,\r\n      cnpj: orgao.cnpj,\r\n      poderId: orgao.poderId,\r\n      esferaId: orgao.esferaId,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    const contratos: InfoContrato[] = response.data.data[0].contratos || [];\r\n    if (contratos.length === 0) {\r\n      console.error(\"Nenhum contrato encontrado para o órgão.\");\r\n      return { orgao: infoOrgao, contratos: [] };\r\n    }\r\n\r\n    return { orgao: infoOrgao, contratos };\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Erro na busca de dados do órgão!\", error.response?.data);\r\n    } else {\r\n      console.error(\"Erro inesperado:\", error);\r\n    }\r\n    return { orgao: null, contratos: [] };\r\n  }\r\n};\r\n\r\nexport default fetchOrgaoInfo;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,+CAA+C;AAoE/D,MAAMC,cAAc,GAAG,MAAAA,CACrBC,IAAY,EACZC,WAAmB,EACnBC,SAAiB,EACjBC,MAAc,GAAG,CAAC,KACf;EACH;EACA,MAAMC,oBAAoB,GAAG,IAAIC,IAAI,CAACJ,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC/F,MAAMC,kBAAkB,GAAG,IAAIJ,IAAI,CAACH,SAAS,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAE3F,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAmB7Bb,OAAO,EAAE;MACVc,MAAM,EAAE;QACNZ,IAAI;QACJC,WAAW,EAAEG,oBAAoB;QACjCF,SAAS,EAAEO,kBAAkB;QAC7BN;MACF;IACF,CAAC,CAAC;IAEF,IAAIO,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACnCC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;MAC/D,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAG,CAAC;IACvC;IAEA,MAAMD,KAAK,GAAGP,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACM,aAAa;IACjD,MAAMC,SAAoB,GAAG;MAC3BC,WAAW,EAAEJ,KAAK,CAACI,WAAW;MAC9BrB,IAAI,EAAEiB,KAAK,CAACjB,IAAI;MAChBsB,OAAO,EAAEL,KAAK,CAACK,OAAO;MACtBC,QAAQ,EAAEN,KAAK,CAACM,QAAQ;MACxBC,MAAM,EAAEd,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACY,YAAY,CAACD,MAAM;MACjDE,aAAa,EAAEhB,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACY,YAAY,CAACC;IACpD,CAAC;IAED,MAAMR,SAAyB,GAAGR,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACK,SAAS,IAAI,EAAE;IACvE,IAAIA,SAAS,CAACJ,MAAM,KAAK,CAAC,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC;MACzD,OAAO;QAAEC,KAAK,EAAEG,SAAS;QAAEF,SAAS,EAAE;MAAG,CAAC;IAC5C;IAEA,OAAO;MAAED,KAAK,EAAEG,SAAS;MAAEF;IAAU,CAAC;EACxC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,IAAInB,KAAK,CAAC8B,YAAY,CAACX,KAAK,CAAC,EAAE;MAAA,IAAAY,eAAA;MAC7Bb,OAAO,CAACC,KAAK,CAAC,kCAAkC,GAAAY,eAAA,GAAEZ,KAAK,CAACN,QAAQ,cAAAkB,eAAA,uBAAdA,eAAA,CAAgBf,IAAI,CAAC;IACzE,CAAC,MAAM;MACLE,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C;IACA,OAAO;MAAEC,KAAK,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAG,CAAC;EACvC;AACF,CAAC;AAED,eAAenB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}