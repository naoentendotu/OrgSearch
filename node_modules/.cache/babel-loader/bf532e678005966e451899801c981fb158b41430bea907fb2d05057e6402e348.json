{"ast":null,"code":"// pncpAPI.ts\nimport axios from 'axios';\n// Verifique se o caminho está correto\n\nconst fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  try {\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n      params: {\n        cnpj,\n        dataInicial,\n        dataFinal,\n        pagina\n      }\n    });\n\n    // Extraindo o órgão\n    const orgao = {\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\n      poderId: response.data.data[0].orgaoEntidade.poderId,\n      esferaId: response.data.data[0].orgaoEntidade.esferaId,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Extraindo contratos\n    const contratos = response.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial\n    }));\n    return {\n      orgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar informações:\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Erro ao buscar informações do órgão.\");\n    } else {\n      throw new Error(\"Erro ao buscar informações do órgão.\");\n    }\n  }\n};\nexport default fetchOrgaoInfo;","map":{"version":3,"names":["axios","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","response","get","params","orgao","razaoSocial","data","orgaoEntidade","poderId","esferaId","ufNome","unidadeOrgao","municipioNome","contratos","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","error","console","isAxiosError","_error$response","_error$response$data","Error","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["// pncpAPI.ts\r\nimport axios from 'axios';\r\nimport { InfoOrgao, InfoContrato } from '../tipos/index'; // Verifique se o caminho está correto\r\n\r\nconst fetchOrgaoInfo = async (cnpj: string, dataInicial: string, dataFinal: string, pagina: number) => {\r\n  try {\r\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial,\r\n        dataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    // Extraindo o órgão\r\n    const orgao: InfoOrgao = {\r\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\r\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\r\n      poderId: response.data.data[0].orgaoEntidade.poderId,\r\n      esferaId: response.data.data[0].orgaoEntidade.esferaId,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    // Extraindo contratos\r\n    const contratos: InfoContrato[] = response.data.data.map((contrato: any) => ({\r\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n      dataVigenciaFim: contrato.dataVigenciaFim,\r\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n      objetoContrato: contrato.objetoContrato,\r\n      valorInicial: contrato.valorInicial,\r\n    }));\r\n\r\n    return { orgao, contratos };\r\n\r\n  } catch (error: unknown) {\r\n    console.error(\"Erro ao buscar informações:\", error);\r\n    \r\n    if (axios.isAxiosError(error)) {\r\n      throw new Error(error.response?.data?.message || \"Erro ao buscar informações do órgão.\");\r\n    } else {\r\n      throw new Error(\"Erro ao buscar informações do órgão.\");\r\n    }\r\n  }\r\n};\r\n\r\nexport default fetchOrgaoInfo;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACiC;;AAE1D,MAAMC,cAAc,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAiB,EAAEC,MAAc,KAAK;EACrG,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,+CAA+C,EAAE;MAChFC,MAAM,EAAE;QACNN,IAAI;QACJC,WAAW;QACXC,SAAS;QACTC;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAMI,KAAgB,GAAG;MACvBC,WAAW,EAAEJ,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAACF,WAAW;MAC5DR,IAAI,EAAEI,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAACV,IAAI;MAC9CW,OAAO,EAAEP,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAACC,OAAO;MACpDC,QAAQ,EAAER,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAACE,QAAQ;MACtDC,MAAM,EAAET,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACK,YAAY,CAACD,MAAM;MACjDE,aAAa,EAAEX,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACK,YAAY,CAACC;IACpD,CAAC;;IAED;IACA,MAAMC,SAAyB,GAAGZ,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACQ,GAAG,CAAEC,QAAa,KAAM;MAC3EC,qBAAqB,EAAED,QAAQ,CAACC,qBAAqB;MACrDC,kBAAkB,EAAEF,QAAQ,CAACE,kBAAkB;MAC/CC,eAAe,EAAEH,QAAQ,CAACG,eAAe;MACzCC,yBAAyB,EAAEJ,QAAQ,CAACI,yBAAyB;MAC7DC,cAAc,EAAEL,QAAQ,CAACK,cAAc;MACvCC,YAAY,EAAEN,QAAQ,CAACM;IACzB,CAAC,CAAC,CAAC;IAEH,OAAO;MAAEjB,KAAK;MAAES;IAAU,CAAC;EAE7B,CAAC,CAAC,OAAOS,KAAc,EAAE;IACvBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IAEnD,IAAI3B,KAAK,CAAC6B,YAAY,CAACF,KAAK,CAAC,EAAE;MAAA,IAAAG,eAAA,EAAAC,oBAAA;MAC7B,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAH,KAAK,CAACrB,QAAQ,cAAAwB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBnB,IAAI,cAAAoB,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,sCAAsC,CAAC;IAC1F,CAAC,MAAM;MACL,MAAM,IAAID,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF;AACF,CAAC;AAED,eAAe/B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}