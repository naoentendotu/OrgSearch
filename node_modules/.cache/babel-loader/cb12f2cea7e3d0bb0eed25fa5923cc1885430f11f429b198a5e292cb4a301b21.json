{"ast":null,"code":"import axios from \"axios\";\n// Função para validar o CNPJ\nconst isValidCnpj = cnpj => {\n  const cnpjRegex = /^\\d{14}$/; // Verifica se possui 14 dígitos\n  return cnpjRegex.test(cnpj);\n};\n\n// Função para buscar informações do órgão e contratos\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina) => {\n  // Verificação dos dados de entrada\n  if (!isValidCnpj(cnpj)) {\n    throw new Error(\"CNPJ inválido.\");\n  }\n\n  // Validar e formatar datas\n  const startDate = new Date(dataInicial);\n  const endDate = new Date(dataFinal);\n  console.log(\"CNPJ:\", cnpj);\n  console.log(\"Data Inicial:\", dataInicial);\n  console.log(\"Data Final:\", dataFinal);\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n    throw new Error(\"Formato de data inválido. Use 'YYYY-MM-DD'.\");\n  }\n  if (startDate > endDate) {\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\n  }\n\n  // Formatando as datas no padrão esperado (YYYYMMDD)\n  const formattedDataInicial = dataInicial.replace(/-/g, '');\n  const formattedDataFinal = dataFinal.replace(/-/g, '');\n  try {\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n\n    // Log da resposta completa\n    console.log(\"Resposta da API:\", response.data);\n    if (!response.data.data || response.data.data.length === 0) {\n      throw new Error(\"Nenhum contrato encontrado para o CNPJ informado.\");\n    }\n\n    // Extrair dados do órgão a partir do primeiro contrato retornado\n    const orgao = {\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Extrair dados dos contratos\n    const contratos = response.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial,\n      cnpjFornecedor: contrato.niFornecedor\n    }));\n\n    // Verifica se o CNPJ buscado está entre os contratos retornados\n    let cnpjEncontrado = contratos.some(contrato => contrato.cnpjFornecedor === cnpj);\n    console.log(\"CNPJ buscado:\", cnpj);\n    console.log(\"CNPJ encontrado nos contratos:\", contratos.map(contrato => contrato.cnpjFornecedor));\n\n    // Paginação caso o CNPJ não seja encontrado na primeira página\n    if (!cnpjEncontrado) {\n      let paginaAtual = 2; // Inicia na segunda página\n      const totalPaginas = response.data.totalPaginas;\n      while (paginaAtual <= totalPaginas) {\n        const responsePaginated = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\n          params: {\n            cnpj,\n            dataInicial: formattedDataInicial,\n            dataFinal: formattedDataFinal,\n            pagina: paginaAtual\n          }\n        });\n        const contratosPaginated = responsePaginated.data.data.map(contrato => ({\n          numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n          dataVigenciaInicio: contrato.dataVigenciaInicio,\n          dataVigenciaFim: contrato.dataVigenciaFim,\n          nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n          objetoContrato: contrato.objetoContrato,\n          valorInicial: contrato.valorInicial,\n          cnpjFornecedor: contrato.niFornecedor\n        }));\n        cnpjEncontrado = contratosPaginated.some(contrato => contrato.cnpjFornecedor === cnpj);\n        if (cnpjEncontrado) {\n          console.log(\"CNPJ encontrado na página:\", paginaAtual);\n          contratos.push(...contratosPaginated); // Adiciona os contratos encontrados\n          break; // Para a pesquisa se o CNPJ foi encontrado\n        }\n        paginaAtual++;\n      }\n    }\n    if (!cnpjEncontrado) {\n      console.warn(\"O CNPJ buscado não foi encontrado em nenhuma das páginas.\");\n    }\n    return {\n      orgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar informações:\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"Detalhes do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erro ao buscar informações do órgão.\");\n    } else {\n      throw new Error(\"Erro ao buscar informações do órgão.\");\n    }\n  }\n};","map":{"version":3,"names":["axios","isValidCnpj","cnpj","cnpjRegex","test","fetchOrgaoInfo","dataInicial","dataFinal","pagina","Error","startDate","Date","endDate","console","log","isNaN","getTime","formattedDataInicial","replace","formattedDataFinal","response","get","params","data","length","orgao","razaoSocial","orgaoEntidade","ufNome","unidadeOrgao","municipioNome","contratos","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","cnpjFornecedor","niFornecedor","cnpjEncontrado","some","paginaAtual","totalPaginas","responsePaginated","contratosPaginated","push","warn","error","isAxiosError","_error$response","_error$response2","_error$response2$data","message"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\";\r\n\r\n// Função para validar o CNPJ\r\nconst isValidCnpj = (cnpj: string): boolean => {\r\n  const cnpjRegex = /^\\d{14}$/; // Verifica se possui 14 dígitos\r\n  return cnpjRegex.test(cnpj);\r\n};\r\n\r\n// Função para buscar informações do órgão e contratos\r\nexport const fetchOrgaoInfo = async (\r\n  cnpj: string,\r\n  dataInicial: string,\r\n  dataFinal: string,\r\n  pagina: number\r\n): Promise<{ orgao: InfoOrgao; contratos: InfoContrato[] }> => {\r\n  // Verificação dos dados de entrada\r\n  if (!isValidCnpj(cnpj)) {\r\n    throw new Error(\"CNPJ inválido.\");\r\n  }\r\n\r\n  // Validar e formatar datas\r\n  const startDate = new Date(dataInicial);\r\n  const endDate = new Date(dataFinal);\r\n\r\n  console.log(\"CNPJ:\", cnpj);\r\n  console.log(\"Data Inicial:\", dataInicial);\r\n  console.log(\"Data Final:\", dataFinal);\r\n\r\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n    throw new Error(\"Formato de data inválido. Use 'YYYY-MM-DD'.\");\r\n  }\r\n\r\n  if (startDate > endDate) {\r\n    throw new Error(\"A data inicial deve ser anterior à data final.\");\r\n  }\r\n\r\n  // Formatando as datas no padrão esperado (YYYYMMDD)\r\n  const formattedDataInicial = dataInicial.replace(/-/g, '');\r\n  const formattedDataFinal = dataFinal.replace(/-/g, '');\r\n\r\n  try {\r\n    const response = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\r\n      params: {\r\n        cnpj,\r\n        dataInicial: formattedDataInicial,\r\n        dataFinal: formattedDataFinal,\r\n        pagina,\r\n      },\r\n    });\r\n\r\n    // Log da resposta completa\r\n    console.log(\"Resposta da API:\", response.data);\r\n\r\n    if (!response.data.data || response.data.data.length === 0) {\r\n      throw new Error(\"Nenhum contrato encontrado para o CNPJ informado.\");\r\n    }\r\n\r\n    // Extrair dados do órgão a partir do primeiro contrato retornado\r\n    const orgao: InfoOrgao = {\r\n      razaoSocial: response.data.data[0].orgaoEntidade.razaoSocial,\r\n      cnpj: response.data.data[0].orgaoEntidade.cnpj,\r\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n    };\r\n\r\n    // Extrair dados dos contratos\r\n    const contratos: InfoContrato[] = response.data.data.map((contrato: any) => ({\r\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n      dataVigenciaFim: contrato.dataVigenciaFim,\r\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n      objetoContrato: contrato.objetoContrato,\r\n      valorInicial: contrato.valorInicial,\r\n      cnpjFornecedor: contrato.niFornecedor,\r\n    }));\r\n\r\n    // Verifica se o CNPJ buscado está entre os contratos retornados\r\n    let cnpjEncontrado = contratos.some(contrato => contrato.cnpjFornecedor === cnpj);\r\n    console.log(\"CNPJ buscado:\", cnpj);\r\n    console.log(\"CNPJ encontrado nos contratos:\", contratos.map(contrato => contrato.cnpjFornecedor));\r\n\r\n    // Paginação caso o CNPJ não seja encontrado na primeira página\r\n    if (!cnpjEncontrado) {\r\n      let paginaAtual = 2; // Inicia na segunda página\r\n      const totalPaginas = response.data.totalPaginas;\r\n\r\n      while (paginaAtual <= totalPaginas) {\r\n        const responsePaginated = await axios.get(`https://pncp.gov.br/api/consulta/v1/contratos`, {\r\n          params: {\r\n            cnpj,\r\n            dataInicial: formattedDataInicial,\r\n            dataFinal: formattedDataFinal,\r\n            pagina: paginaAtual,\r\n          },\r\n        });\r\n\r\n        const contratosPaginated: InfoContrato[] = responsePaginated.data.data.map((contrato: any) => ({\r\n          numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n          dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n          dataVigenciaFim: contrato.dataVigenciaFim,\r\n          nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n          objetoContrato: contrato.objetoContrato,\r\n          valorInicial: contrato.valorInicial,\r\n          cnpjFornecedor: contrato.niFornecedor,\r\n        }));\r\n\r\n        cnpjEncontrado = contratosPaginated.some(contrato => contrato.cnpjFornecedor === cnpj);\r\n\r\n        if (cnpjEncontrado) {\r\n          console.log(\"CNPJ encontrado na página:\", paginaAtual);\r\n          contratos.push(...contratosPaginated); // Adiciona os contratos encontrados\r\n          break; // Para a pesquisa se o CNPJ foi encontrado\r\n        }\r\n\r\n        paginaAtual++;\r\n      }\r\n    }\r\n\r\n    if (!cnpjEncontrado) {\r\n      console.warn(\"O CNPJ buscado não foi encontrado em nenhuma das páginas.\");\r\n    }\r\n\r\n    return { orgao, contratos };\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar informações:\", error);\r\n\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(\"Detalhes do erro:\", error.response?.data);\r\n      throw new Error(error.response?.data?.message || \"Erro ao buscar informações do órgão.\");\r\n    } else {\r\n      throw new Error(\"Erro ao buscar informações do órgão.\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}