{"ast":null,"code":"import axios from \"axios\";\nconst url_api = \"https://pncp.gov.br/api/consulta/v1/contratos\";\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina = 1) => {\n  // Formata as datas no formato yyyyMMdd\n  const formattedDataInicial = dataInicial.replace(/-/g, \"\"); // Ex: 2024-02-09 para 20240209\n  const formattedDataFinal = dataFinal.replace(/-/g, \"\"); // Ex: 2024-08-31 para 20240831\n\n  try {\n    const response = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial: formattedDataInicial,\n        dataFinal: formattedDataFinal,\n        pagina\n      }\n    });\n    console.log(\"Dados da API\", response.data); // Log da resposta\n\n    // Verifica se há dados na resposta\n    if (!response.data || !response.data.data || response.data.data.length === 0) {\n      console.error(\"Nenhum dado encontrado ou resposta inesperada.\");\n      return {\n        orgao: null,\n        contratos: []\n      }; // Retorna se não houver dados\n    }\n\n    // Adquirindo informações do órgão (considerando o primeiro órgão retornado)\n    const orgao = response.data.data[0].orgaoEntidade;\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      ufNome: response.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: response.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Adquirindo informações dos contratos\n    const contratos = response.data.data[0].contratos.map(item => ({\n      numeroContratoEmpenho: item.numeroContratoEmpenho,\n      dataVigenciaInicio: item.dataVigenciaInicio,\n      dataVigenciaFim: item.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: item.nomeRazaoSocialFornecedor,\n      objetoContrato: item.objetoContrato,\n      valorInicial: item.valorInicial\n    }));\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    console.error(\"Erro na busca de dados do órgão!\", error);\n    if (axios.isAxiosError(error)) {\n      var _error$response;\n      console.error(\"Dados do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      if (error.response) {\n        console.error(\"Status:\", error.response.status);\n        console.error(\"Mensagem:\", error.response.statusText);\n      }\n    } else {\n      console.error(\"Erro desconhecido:\", error);\n    }\n    return null; // Retorna nulo em caso de erro\n  }\n};","map":{"version":3,"names":["axios","url_api","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","formattedDataInicial","replace","formattedDataFinal","response","get","params","console","log","data","length","error","orgao","contratos","orgaoEntidade","infoOrgao","razaoSocial","ufNome","unidadeOrgao","municipioNome","map","item","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","isAxiosError","_error$response","status","statusText"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { InfoOrgao, InfoContrato } from \"../tipos/index\";\r\n\r\nconst url_api = \"https://pncp.gov.br/api/consulta/v1/contratos\";\r\n\r\nexport const fetchOrgaoInfo = async (cnpj: string, dataInicial: string, dataFinal: string, pagina: number = 1) => {\r\n    // Formata as datas no formato yyyyMMdd\r\n    const formattedDataInicial = dataInicial.replace(/-/g, \"\"); // Ex: 2024-02-09 para 20240209\r\n    const formattedDataFinal = dataFinal.replace(/-/g, \"\"); // Ex: 2024-08-31 para 20240831\r\n\r\n    try {\r\n        const response = await axios.get<{\r\n            data: {\r\n                orgaoEntidade: InfoOrgao;\r\n                unidadeOrgao: { ufNome: string; municipioNome: string; };\r\n                contratos: InfoContrato[];\r\n            }[];\r\n            totalRegistros: number;\r\n            totalPaginas: number;\r\n            numeroPagina: number;\r\n            paginasRestantes: number;\r\n            empty: boolean;\r\n        }>(url_api, {\r\n            params: {\r\n                cnpj,\r\n                dataInicial: formattedDataInicial,\r\n                dataFinal: formattedDataFinal,\r\n                pagina\r\n            },\r\n        });\r\n\r\n        console.log(\"Dados da API\", response.data); // Log da resposta\r\n\r\n        // Verifica se há dados na resposta\r\n        if (!response.data || !response.data.data || response.data.data.length === 0) {\r\n            console.error(\"Nenhum dado encontrado ou resposta inesperada.\");\r\n            return { orgao: null, contratos: [] }; // Retorna se não houver dados\r\n        }\r\n\r\n        // Adquirindo informações do órgão (considerando o primeiro órgão retornado)\r\n        const orgao = response.data.data[0].orgaoEntidade;\r\n        const infoOrgao: InfoOrgao = {\r\n            razaoSocial: orgao.razaoSocial,\r\n            cnpj: orgao.cnpj,\r\n            ufNome: response.data.data[0].unidadeOrgao.ufNome,\r\n            municipioNome: response.data.data[0].unidadeOrgao.municipioNome,\r\n        };\r\n\r\n        // Adquirindo informações dos contratos\r\n        const contratos: InfoContrato[] = response.data.data[0].contratos.map((item) => ({\r\n            numeroContratoEmpenho: item.numeroContratoEmpenho,\r\n            dataVigenciaInicio: item.dataVigenciaInicio,\r\n            dataVigenciaFim: item.dataVigenciaFim,\r\n            nomeRazaoSocialFornecedor: item.nomeRazaoSocialFornecedor,\r\n            objetoContrato: item.objetoContrato,\r\n            valorInicial: item.valorInicial,\r\n        }));\r\n\r\n        return { orgao: infoOrgao, contratos };\r\n\r\n    } catch (error: unknown) {\r\n        console.error(\"Erro na busca de dados do órgão!\", error);\r\n        if (axios.isAxiosError(error)) {\r\n            console.error(\"Dados do erro:\", error.response?.data);\r\n            if (error.response) {\r\n                console.error(\"Status:\", error.response.status);\r\n                console.error(\"Mensagem:\", error.response.statusText);\r\n            }\r\n        } else {\r\n            console.error(\"Erro desconhecido:\", error);\r\n        }\r\n        return null; // Retorna nulo em caso de erro\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}