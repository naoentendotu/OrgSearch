{"ast":null,"code":"import axios from 'axios';\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\nexport const fetchOrgaoInfo = async (cnpj, dataInicial, dataFinal, pagina = 1) => {\n  try {\n    // Requisição para a API\n    const resposta = await axios.get(url_api, {\n      params: {\n        cnpj,\n        dataInicial,\n        dataFinal,\n        pagina // Adiciona o parâmetro 'pagina'\n      }\n    });\n    console.log(\"Dados da API\", resposta.data);\n\n    // Verifica se há dados\n    if (resposta.data.empty || resposta.data.totalRegistros === 0) {\n      return {\n        orgao: null,\n        contratos: []\n      }; // Retorna se não houver dados\n    }\n\n    // Adquirindo informações do órgão\n    const orgao = resposta.data.data[0].orgaoEntidade; // ou orgaoSubRogado\n    const infoOrgao = {\n      razaoSocial: orgao.razaoSocial,\n      cnpj: orgao.cnpj,\n      ufNome: resposta.data.data[0].unidadeOrgao.ufNome,\n      municipioNome: resposta.data.data[0].unidadeOrgao.municipioNome\n    };\n\n    // Adquirindo informações dos contratos\n    const contratos = resposta.data.data.map(contrato => ({\n      numeroContratoEmpenho: contrato.numeroContratoEmpenho,\n      dataVigenciaInicio: contrato.dataVigenciaInicio,\n      dataVigenciaFim: contrato.dataVigenciaFim,\n      nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\n      objetoContrato: contrato.objetoContrato,\n      valorInicial: contrato.valorInicial\n    }));\n\n    // Retorna as informações do órgão e contratos\n    return {\n      orgao: infoOrgao,\n      contratos\n    };\n  } catch (error) {\n    console.error('Erro na busca de dados do órgão!', error);\n    if (axios.isAxiosError(error)) {\n      var _error$response;\n      console.error('Dados do erro:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    } else {\n      console.error('Erro desconhecido:', error);\n    }\n    return null;\n  }\n};","map":{"version":3,"names":["axios","url_api","fetchOrgaoInfo","cnpj","dataInicial","dataFinal","pagina","resposta","get","params","console","log","data","empty","totalRegistros","orgao","contratos","orgaoEntidade","infoOrgao","razaoSocial","ufNome","unidadeOrgao","municipioNome","map","contrato","numeroContratoEmpenho","dataVigenciaInicio","dataVigenciaFim","nomeRazaoSocialFornecedor","objetoContrato","valorInicial","error","isAxiosError","_error$response","response"],"sources":["C:/Users/tuliana/orgsearch/src/api/pncpAPI.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { InfoOrgao, InfoContrato } from '../tipos/index';\r\n\r\nconst url_api = 'https://pncp.gov.br/api/consulta/v1/contratos';\r\n\r\nexport const fetchOrgaoInfo = async (cnpj: string, dataInicial: string, dataFinal: string, pagina: number = 1) => {\r\n    try {\r\n        // Requisição para a API\r\n        const resposta = await axios.get(url_api, {\r\n            params: {\r\n                cnpj,\r\n                dataInicial,\r\n                dataFinal,\r\n                pagina,  // Adiciona o parâmetro 'pagina'\r\n            },\r\n        });\r\n\r\n        console.log(\"Dados da API\", resposta.data);\r\n\r\n        // Verifica se há dados\r\n        if (resposta.data.empty || resposta.data.totalRegistros === 0) {\r\n            return { orgao: null, contratos: [] }; // Retorna se não houver dados\r\n        }\r\n\r\n        // Adquirindo informações do órgão\r\n        const orgao = resposta.data.data[0].orgaoEntidade; // ou orgaoSubRogado\r\n        const infoOrgao: InfoOrgao = {\r\n            razaoSocial: orgao.razaoSocial,\r\n            cnpj: orgao.cnpj,\r\n            ufNome: resposta.data.data[0].unidadeOrgao.ufNome,\r\n            municipioNome: resposta.data.data[0].unidadeOrgao.municipioNome,\r\n        };\r\n\r\n        // Adquirindo informações dos contratos\r\n        const contratos: InfoContrato[] = resposta.data.data.map((contrato: any) => ({\r\n            numeroContratoEmpenho: contrato.numeroContratoEmpenho,\r\n            dataVigenciaInicio: contrato.dataVigenciaInicio,\r\n            dataVigenciaFim: contrato.dataVigenciaFim,\r\n            nomeRazaoSocialFornecedor: contrato.nomeRazaoSocialFornecedor,\r\n            objetoContrato: contrato.objetoContrato,\r\n            valorInicial: contrato.valorInicial,\r\n        }));\r\n\r\n        // Retorna as informações do órgão e contratos\r\n        return { orgao: infoOrgao, contratos };\r\n\r\n    } catch (error: unknown) {\r\n        console.error('Erro na busca de dados do órgão!', error);\r\n        if (axios.isAxiosError(error)) {\r\n            console.error('Dados do erro:', error.response?.data);\r\n        } else {\r\n            console.error('Erro desconhecido:', error);\r\n        }\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,+CAA+C;AAE/D,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,CAAC,KAAK;EAC9G,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,OAAO,EAAE;MACtCQ,MAAM,EAAE;QACJN,IAAI;QACJC,WAAW;QACXC,SAAS;QACTC,MAAM,CAAG;MACb;IACJ,CAAC,CAAC;IAEFI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,QAAQ,CAACK,IAAI,CAAC;;IAE1C;IACA,IAAIL,QAAQ,CAACK,IAAI,CAACC,KAAK,IAAIN,QAAQ,CAACK,IAAI,CAACE,cAAc,KAAK,CAAC,EAAE;MAC3D,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAG,CAAC,CAAC,CAAC;IAC3C;;IAEA;IACA,MAAMD,KAAK,GAAGR,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACK,aAAa,CAAC,CAAC;IACnD,MAAMC,SAAoB,GAAG;MACzBC,WAAW,EAAEJ,KAAK,CAACI,WAAW;MAC9BhB,IAAI,EAAEY,KAAK,CAACZ,IAAI;MAChBiB,MAAM,EAAEb,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACS,YAAY,CAACD,MAAM;MACjDE,aAAa,EAAEf,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACS,YAAY,CAACC;IACtD,CAAC;;IAED;IACA,MAAMN,SAAyB,GAAGT,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACW,GAAG,CAAEC,QAAa,KAAM;MACzEC,qBAAqB,EAAED,QAAQ,CAACC,qBAAqB;MACrDC,kBAAkB,EAAEF,QAAQ,CAACE,kBAAkB;MAC/CC,eAAe,EAAEH,QAAQ,CAACG,eAAe;MACzCC,yBAAyB,EAAEJ,QAAQ,CAACI,yBAAyB;MAC7DC,cAAc,EAAEL,QAAQ,CAACK,cAAc;MACvCC,YAAY,EAAEN,QAAQ,CAACM;IAC3B,CAAC,CAAC,CAAC;;IAEH;IACA,OAAO;MAAEf,KAAK,EAAEG,SAAS;MAAEF;IAAU,CAAC;EAE1C,CAAC,CAAC,OAAOe,KAAc,EAAE;IACrBrB,OAAO,CAACqB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,IAAI/B,KAAK,CAACgC,YAAY,CAACD,KAAK,CAAC,EAAE;MAAA,IAAAE,eAAA;MAC3BvB,OAAO,CAACqB,KAAK,CAAC,gBAAgB,GAAAE,eAAA,GAAEF,KAAK,CAACG,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBrB,IAAI,CAAC;IACzD,CAAC,MAAM;MACHF,OAAO,CAACqB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC9C;IACA,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}