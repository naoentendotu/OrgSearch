import React, { FC, ComponentType } from 'react';
import tags from './tags';

type HtmlTag = typeof tags[number];
type HtmlTagProps<TTag extends HtmlTag> = TTag extends React.ElementType
  ? React.ComponentProps<TTag>
  : never;

type TailwFuncTag = <T extends HtmlTag, TAs extends HtmlTag = T>(
  tag: T,
  classNames: string
) => FC<HtmlTagProps<T> | ({as: TAs} & HtmlTagProps<TAs>)>;
type TailwFuncComponent = <TProps>(
  component: ComponentType<TProps>,
  classNames: string
) => FC<TProps>;
type TailwFunc = TailwFuncTag & TailwFuncComponent;

type Tailw = TailwFunc &
  {
    [Tag in HtmlTag]: (
      classNames: string | TemplateStringsArray
    ) => FC<HtmlTagProps<Tag>>;
  };

function tailwFunc<T extends HtmlTag, TAs extends HtmlTag = T>(
  tag: T,
  classNames: string
): FC<HtmlTagProps<T> | ({as: TAs} & HtmlTagProps<TAs>)>;
function tailwFunc<TProps>(
  component: ComponentType<TProps>,
  classNames: string
): FC<TProps>;

function tailwFunc(
  element: HtmlTag | ComponentType<unknown>,
  className: string
): FC<{ className?: string, as?: HtmlTag } & unknown> {
  return ({ className: propClassName, as, ...props }) => {
    let names = '';
    if (className) names += className;
    if (propClassName) names += ' ' + propClassName;

    return React.createElement(as ?? element, {
      className: names,
      ...props,
    } as any);
  };
}
const tailw = tailwFunc as Tailw;

tags.forEach(tag => {
  tailw[tag] = (classNames: string | TemplateStringsArray) => {
    const names =
      typeof classNames === 'string' ? classNames : classNames.join(' ');

    return tailw(tag, names) as any;
  };
});

export default tailw;
